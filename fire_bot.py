# ‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
!pip -q install python-telegram-bot==20.6 requests pandas python-dotenv

# ‚¨áÔ∏è –ó–∞–¥–∞—ë–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è)
%env BOT_TOKEN=123456:ABC...      # —Ç–æ–∫–µ–Ω @BotFather
%env CHAT_ID=987654321            # ID —á–∞—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã (–¥–ª—è –≥—Ä—É–ø–ø—ã –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å -100‚Ä¶)
%env MAP_KEY=abcd1234...          # FIRMS Map Key

# ‚¨áÔ∏è –°–∞–º –±–æ—Ç ‚Äî –≤—Å—Ç–∞–≤–ª–µ–Ω —Ü–µ–ª–∏–∫–æ–º
import os, ssl, sqlite3, requests, pandas as pd, time
from io import StringIO
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# 1. –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É TLS (–∫–∞–∫ --trusted-host)
ssl._create_default_https_context = ssl._create_unverified_context
requests.packages.urllib3.disable_warnings()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = int(os.getenv("CHAT_ID"))
MAP_KEY   = os.getenv("MAP_KEY")
TIMEOUT   = 30           # —Å–µ–∫—É–Ω–¥
SOURCES   = ["VIIRS_SNPP_NRT","VIIRS_NOAA20_NRT","VIIRS_NOAA21_NRT",
             "MODIS_NRT","LANDSAT_NRT"]

# 2. –ë–∞–∑–∞ ¬´—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö¬ª (–≤ –ø–∞–º—è—Ç–∏, —Ö–≤–∞—Ç–∏—Ç –¥–ª—è Colab-—Å–µ—Å—Å–∏–∏)
db = sqlite3.connect(":memory:")
db.execute("CREATE TABLE IF NOT EXISTS seen(id TEXT PRIMARY KEY)")

def uid(r):  return f"{r.acq_date}_{r.acq_time}_{r.latitude}_{r.longitude}"
def risk(c): return {"l":"–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫","n":"—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫","h":"–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"}.get(c.lower(),"?")

# 3. –ö–æ–º–∞–Ω–¥–∞ /help
async def help_cmd(u:Update, c:ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text(
        "–ë–æ—Ç NASA FIRMS ‚Äî –∫–∞–∂–¥—ã–µ 60 —Å –Ω–æ–≤—ã–µ –ø–æ–∂–∞—Ä—ã (KAZ).\n"
        "FRP ‚Äî –º–æ—â–Ω–æ—Å—Ç—å (–ú–í—Ç); —Ä–∏—Å–∫ ‚Äî –¥–æ–≤–µ—Ä–∏–µ.\n"
        "–°–≤–æ–¥–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ 11:00 UTC.\n"
        "–†–∞–±–æ—Ç–∞–µ—Ç –∏–∑ Google Colab.")

# 4. –ú–∏–Ω—É—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
async def poll(c:ContextTypes.DEFAULT_TYPE):
    bot, now, new = c.bot, datetime.utcnow(), []
    for src in SOURCES:
        try:
            raw = requests.get(
                f"https://firms.modaps.eosdis.nasa.gov/api/country/csv/{MAP_KEY}/{src}/KAZ/1",
                timeout=TIMEOUT, verify=False).text
            df = pd.read_csv(StringIO(raw))
        except Exception as e:
            print("[WARN]", src, e); continue
        for _,r in df.iterrows():
            if db.execute("SELECT 1 FROM seen WHERE id=?", (uid(r),)).fetchone(): continue
            db.execute("INSERT INTO seen VALUES (?)", (uid(r),))
            new.append((r,src))
    if not new: return
    head = f"üî• –û—á–∞–≥–∏ {now:%H:%M}-{(now+timedelta(minutes=1)):%H:%M} UTC ‚Äî {len(new)}"
    lines=[head]+[
        f"{i}) {r.latitude:.3f}¬∞N {r.longitude:.3f}¬∞E | {src.split('_')[0]} | "
        f"FRP {r.frp:.0f} –ú–í—Ç | {risk(str(r.confidence)[0])}"
        for i,(r,src) in enumerate(new[:10],1)]
    if len(new)>10: lines.append(f"‚Ä¶–∏ –µ—â—ë {len(new)-10} —Ç–æ—á–µ–∫")
    await bot.send_message(CHAT_ID, "\n".join(lines))

# 5. –°—É—Ç–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ (—Ä–∞–±–æ—Ç–∞—Ç—å –±—É–¥–µ—Ç, –µ—Å–ª–∏ Colab –Ω–µ —É—Å–Ω—ë—Ç)
async def daily(c):
    cnt=db.execute("SELECT COUNT(*) FROM seen").fetchone()[0]
    await c.bot.send_message(CHAT_ID,f"üìä –ó–∞ —Å—É—Ç–∫–∏: {cnt} –æ—á–∞–≥–æ–≤")

# 6. –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(BOT_TOKEN).build()
app.add_handler(CommandHandler("help", help_cmd))
jq = app.job_queue
jq.run_repeating(poll, interval=60, first=10)
jq.run_daily(daily, time=datetime.strptime("11:00","%H:%M").time())

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ Colab (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–æ—É—Ç–±—É–∫ –ø–µ—Ä–µ–π–¥—ë—Ç –≤ —Å–æ–Ω).")
app.run_polling()
