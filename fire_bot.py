"""
fire_bot.py  ‚Äî –±–æ—Ç NASA FIRMS –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
‚Ä¢ –∫–∞–∂–¥—ã–µ 60 —Å: –Ω–æ–≤—ã–µ –æ—á–∞–≥–∏ confidence nominal|high (low/‚â§30 –æ—Ç–±—Ä–æ—à–µ–Ω—ã)
‚Ä¢ —Å—É—Ç–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ 11:00 UTC
"""

import os, ssl, sqlite3, requests, pandas as pd
from io import StringIO
from datetime import datetime, timedelta, UTC
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# ‚îÄ‚îÄ TLS off (–∫–æ—Ä–ø-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –º–µ—à–∞—é—Ç)
ssl._create_default_https_context = ssl._create_unverified_context
requests.packages.urllib3.disable_warnings()

# ‚îÄ‚îÄ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Render (–∑–∞–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é –≤ Dashboard ‚Üí Environment)
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID   = int(os.getenv("CHAT_ID"))
MAP_KEY   = os.getenv("MAP_KEY")
TIMEOUT   = int(os.getenv("TIMEOUT", "60"))

SOURCES = [
    "VIIRS_SNPP_NRT", "VIIRS_NOAA20_NRT", "VIIRS_NOAA21_NRT",
    "MODIS_NRT", "LANDSAT_NRT"
]

# ‚îÄ‚îÄ –±–∞–∑–∞ ¬´—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö¬ª
db = sqlite3.connect("seen.db")
db.execute("CREATE TABLE IF NOT EXISTS seen(id TEXT PRIMARY KEY)")
def make_uid(r):  return f"{r.acq_date}_{r.acq_time}_{r.latitude}_{r.longitude}"
def risk(code):   return {"l":"–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫","n":"—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫","h":"–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"}.get(code.lower(),"?")

# ‚îÄ‚îÄ /help
async def help_cmd(u:Update, c:ContextTypes.DEFAULT_TYPE):
    await u.message.reply_text(
        "‚ÑπÔ∏è –ë–æ—Ç NASA FIRMS (KAZ)\n"
        "‚Ä¢ FRP ‚Äî —Ç–µ–ø–ª–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å –æ—á–∞–≥–∞ (–ú–í—Ç).\n"
        "‚Ä¢ –†–∏—Å–∫ (confidence) ‚Äî –¥–æ–≤–µ—Ä–∏–µ –∫ –¥–µ—Ç–µ–∫—Ü–∏–∏.\n"
        "  –ë–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç _—Ç–æ–ª—å–∫–æ_ medium (n) –∏ high (h); low/‚â§30 –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã.\n"
        "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å, —Å—É—Ç–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞ ‚Äî 11:00 UTC.\n"
        "–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps."
    )

# ‚îÄ‚îÄ –º–∏–Ω—É—Ç–Ω—ã–π –æ–ø—Ä–æ—Å
async def poll(c:ContextTypes.DEFAULT_TYPE):
    bot, now, new = c.bot, datetime.now(UTC), []

    for src in SOURCES:
        url = f"https://firms.modaps.eosdis.nasa.gov/api/country/csv/{MAP_KEY}/{src}/KAZ/1"
        try:
            df = pd.read_csv(StringIO(requests.get(url, timeout=TIMEOUT, verify=False).text))
            # –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ nominal/high
            conf = df["confidence"].astype(str).str.lower()
            mask = conf.isin(["n","h"]) | (conf.str.isnumeric() & (conf.astype(int) > 30))
            df = df[mask]
        except Exception as e:
            print("[WARN]", src, e); continue

        for _, r in df.iterrows():
            if db.execute("SELECT 1 FROM seen WHERE id=?", (make_uid(r),)).fetchone(): continue
            db.execute("INSERT INTO seen VALUES (?)", (make_uid(r),))
            new.append((r, src))
    db.commit()
    if not new: return

    head = f"üî• –û—á–∞–≥–∏ {now:%H:%M}-{(now+timedelta(minutes=1)):%H:%M} UTC ‚Äî {len(new)}"
    lines=[head]+[
        f"{i}) {r.latitude:.3f}¬∞N {r.longitude:.3f}¬∞E | {src.split('_')[0]} | "
        f"FRP {r.frp:.0f} –ú–í—Ç | {risk(str(r.confidence)[0])} | "
        f"https://maps.google.com/?q={r.latitude},{r.longitude}"
        for i,(r,src) in enumerate(new[:10],1)]
    if len(new)>10: lines.append(f"‚Ä¶–∏ –µ—â—ë {len(new)-10} —Ç–æ—á–µ–∫")
    await bot.send_message(chat_id=CHAT_ID, text="\n".join(lines))

# ‚îÄ‚îÄ —Å—É—Ç–æ—á–Ω–∞—è —Å–≤–æ–¥–∫–∞
async def daily(c):
    since=(datetime.now(UTC)-timedelta(days=1)).strftime("%Y-%m-%d")
    cnt=db.execute("SELECT COUNT(*) FROM seen WHERE id LIKE ?", (f"{since}%",)).fetchone()[0]
    await c.bot.send_message(CHAT_ID, f"üìä –ò—Ç–æ–≥–∏ –∑–∞ —Å—É—Ç–∫–∏: {cnt} –æ—á–∞–≥–æ–≤")

# ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("help", help_cmd))
    jq = app.job_queue
    jq.run_repeating(poll, 60, first=10)
    jq.run_daily(daily, time=datetime.strptime("11:00","%H:%M").time())
    print("[START] bot ‚Äî only medium/high risks")
    app.run_polling(stop_signals=None)

if __name__ == "__main__":
    main()
